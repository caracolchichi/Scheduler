/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package scheduler;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.*;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.ListModel;

/**
 *
 * @author Andres
 */
public class InputWindow extends javax.swing.JFrame {

    public List<Room> Aulas = new ArrayList<>();
    public List<Instructor> Instructores = new ArrayList<>();
    public List<Class> Clases = new ArrayList<>();
    public List<Student> Alumnos = new ArrayList<>();
    public List<Class> ClasesDeseadas = new ArrayList<>();
    public List<Integer> TimeSlots = new ArrayList<Integer>() {
        {
            add(700);
            add(830);
            add(1000);
            add(1130);
            add(1300);
            add(1420);
            add(1540);
            add(1700);
            add(1830);
        }
    };

    public void generateRooms() {
        Aulas.clear();
        int numeroAulas = (int) inputAulas.getValue();
        if (numeroAulas != 0) {
            for (int i = 0; i < numeroAulas; i++) {
                Aulas.add(new Room(i));
            }
        }

    }

    /**
     * Creates new form InputWindow
     */
    public InputWindow() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        inputAulas = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        inputInstructorName = new javax.swing.JTextField();
        GenerarAulasBtn = new javax.swing.JButton();
        AgregarInstructorBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        inputCode = new javax.swing.JTextField();
        InstructorCombobox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        bool700 = new javax.swing.JCheckBox();
        bool830 = new javax.swing.JCheckBox();
        bool1000 = new javax.swing.JCheckBox();
        bool1130 = new javax.swing.JCheckBox();
        bool1300 = new javax.swing.JCheckBox();
        bool1420 = new javax.swing.JCheckBox();
        bool1540 = new javax.swing.JCheckBox();
        bool1700 = new javax.swing.JCheckBox();
        bool1830 = new javax.swing.JCheckBox();
        AgregarClaseBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        DisponiblesList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        DeseadasList = new javax.swing.JList<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        DesearBtn = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        inputCuenta = new javax.swing.JTextField();
        IngresarAlumnoBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        ScheduleButton = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Numero de Aulas");

        jLabel2.setText("Instructor");

        inputInstructorName.setText("Nombre");
        inputInstructorName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputInstructorNameActionPerformed(evt);
            }
        });

        GenerarAulasBtn.setText("Generar Aulas");
        GenerarAulasBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerarAulasBtnActionPerformed(evt);
            }
        });

        AgregarInstructorBtn.setText("Agregar Instructor");
        AgregarInstructorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregarInstructorBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Codigo Clase");

        inputCode.setText("CSC001");

        InstructorCombobox.setModel(new DefaultComboBoxModel(Instructores.toArray()));

        jLabel4.setText("Disponibilidad:");

        bool700.setText("7:00");

        bool830.setText("8:30");

        bool1000.setText("10:00");

        bool1130.setText("11:30");

        bool1300.setText("13:00");
        bool1300.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bool1300ActionPerformed(evt);
            }
        });

        bool1420.setText("14:20");

        bool1540.setText("15:40");

        bool1700.setText("17:00");

        bool1830.setText("18:30");

        AgregarClaseBtn.setText("Agregar Clase");
        AgregarClaseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregarClaseBtnActionPerformed(evt);
            }
        });

        jLabel5.setText("1. Ingresar el # de aulas.");

        jLabel6.setText("2. Crear maestro(s) y seleccionar su horario.");

        jLabel7.setText("3. Ingresar clases.");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bool1700)
                    .addComponent(bool1830)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(inputAulas, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(GenerarAulasBtn))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(inputCode, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(InstructorCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(AgregarClaseBtn))
                    .addComponent(jLabel4)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(bool700, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bool830, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bool1000, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bool1130, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bool1300, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bool1420, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bool1540, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(inputInstructorName, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(29, 29, 29)
                        .addComponent(AgregarInstructorBtn))
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addContainerGap(224, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(inputAulas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GenerarAulasBtn))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(inputInstructorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AgregarInstructorBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bool700)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bool830)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bool1000)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bool1130)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bool1300)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bool1420)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bool1540)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bool1700)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bool1830)
                .addGap(26, 26, 26)
                .addComponent(jLabel7)
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(inputCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(InstructorCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AgregarClaseBtn))
                .addContainerGap(112, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Input 1", jPanel1);

        DisponiblesList.setModel(new DefaultListModel());
        jScrollPane1.setViewportView(DisponiblesList);

        DeseadasList.setModel(new DefaultListModel());
        jScrollPane2.setViewportView(DeseadasList);

        jLabel8.setText("Clases Disponibles");

        jLabel9.setText("Clases Deseadas");

        DesearBtn.setText(">>");
        DesearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DesearBtnActionPerformed(evt);
            }
        });

        jLabel10.setText("4. Ingresar numero de cuenta y clases deseadas.");

        jLabel11.setText("Numero de Cuenta");

        inputCuenta.setText("11041006");

        IngresarAlumnoBtn.setText("Ingresar Alumno");
        IngresarAlumnoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IngresarAlumnoBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(inputCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(DesearBtn))
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(IngresarAlumnoBtn))
                        .addGap(67, 67, 67))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(inputCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(DesearBtn)))
                .addGap(38, 38, 38)
                .addComponent(IngresarAlumnoBtn)
                .addContainerGap(67, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Input 2", jPanel2);

        ScheduleButton.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        ScheduleButton.setText("Schedule!");
        ScheduleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ScheduleButtonActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("Se creara el archivo Horario.txt despues de calcular las mejores opciones.");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(ScheduleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(jLabel12)))
                .addContainerGap(122, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(149, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addGap(49, 49, 49)
                .addComponent(ScheduleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(188, 188, 188))
        );

        jTabbedPane1.addTab("Run!", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 707, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Estudiantes");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputInstructorNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputInstructorNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputInstructorNameActionPerformed

    private void GenerarAulasBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerarAulasBtnActionPerformed
        generateRooms();
    }//GEN-LAST:event_GenerarAulasBtnActionPerformed

    private void bool1300ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bool1300ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bool1300ActionPerformed

    private void AgregarInstructorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregarInstructorBtnActionPerformed
        String InstructorName = inputInstructorName.getText();

        Instructor i = new Instructor(InstructorName);
        List<Integer> horario = new LinkedList<Integer>();
        if (bool700.isSelected() == true) {
            horario.add(700);
        }
        if (bool830.isSelected() == true) {
            horario.add(830);
        }
        if (bool1000.isSelected() == true) {
            horario.add(1000);
        }
        if (bool1130.isSelected() == true) {
            horario.add(1130);
        }
        if (bool1300.isSelected() == true) {
            horario.add(1300);
        }
        if (bool1420.isSelected() == true) {
            horario.add(1420);
        }
        if (bool1540.isSelected() == true) {
            horario.add(1540);
        }
        if (bool1700.isSelected() == true) {
            horario.add(1700);
        }
        if (bool1830.isSelected() == true) {
            horario.add(1830);
        }
        i.setHorario(horario);
        Instructores.add(i);
        InstructorCombobox.setModel(new DefaultComboBoxModel(Instructores.toArray()));
    }//GEN-LAST:event_AgregarInstructorBtnActionPerformed

    private void AgregarClaseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregarClaseBtnActionPerformed
        String code = inputCode.getText();
        Instructor i = (Instructor) InstructorCombobox.getSelectedItem();
        Class c = new Class(code, i);
        Clases.add(c);
        DefaultListModel<Class> model = new DefaultListModel<Class>();
        for (Class clase : Clases) {
            model.addElement(clase);
        }
        DisponiblesList.setModel((ListModel) model);
    }//GEN-LAST:event_AgregarClaseBtnActionPerformed

    private void DesearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DesearBtnActionPerformed

        for (int i : DisponiblesList.getSelectedIndices()) {
            ClasesDeseadas.add(Clases.get(i));
        }

        updateClasesDeseadas();
    }//GEN-LAST:event_DesearBtnActionPerformed

    private void updateClasesDeseadas() {
        DefaultListModel<Class> model = new DefaultListModel<Class>();
        for (Class clase : ClasesDeseadas) {
            model.addElement(clase);
        }
        DeseadasList.setModel((ListModel) model);
    }

    private void IngresarAlumnoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IngresarAlumnoBtnActionPerformed
        String studentID = inputCuenta.getText();
        Student s = new Student(studentID, ClasesDeseadas);
        Alumnos.add(s);
        ClasesDeseadas.clear();
        updateClasesDeseadas();

    }//GEN-LAST:event_IngresarAlumnoBtnActionPerformed

    private void ScheduleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScheduleButtonActionPerformed
         magic();
        try {
           
            writeFile();
        } catch (Exception e) {

        }

    }//GEN-LAST:event_ScheduleButtonActionPerformed

    public void writeFile() throws IOException {
        File fout = new File("Horario.txt");
        FileOutputStream fos = new FileOutputStream(fout);
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));

        bw.write("================================Schedule===========================");
        bw.newLine();
        for(Student s: Alumnos){
            double x = s.getEnrolled().size();
            double y = s.getProposed().size();
            double z = (x/y)*5;
            bw.write("Numero de Cuenta: "+s.getStudentID()+" Satisfaccion: "+z);
            bw.newLine();
            for(Class c : s.getEnrolled()){
                if (c.getAula() != -1) {
                    
                bw.write("       Clase: "+c.getCode()+" Aula: "+c.getAula()+" Hora: "+c.getTime());
                bw.newLine();
                }
            }
            bw.write("-------------------------------------------------------------------");
            bw.newLine();
        }
        bw.write("================================End of File==========================");

        bw.close();
    }

    public void magic() {

        for (Student s : Alumnos) {
            //System.out.println(s.toString());
            for (Class c : Clases) {
                //System.out.println("Si entra al loop de clases");
                for (Class c2 : s.getProposed()) {
                    // System.out.println("Entra al loop de proposed");
                    if (c.getCode() == c2.getCode()) {
                        //System.out.println("Si entra");
                        if (!c.isFull()) {
                            //System.out.println("Entro al ciclo");
                            c.enrollStudent(s);
                            s.getEnrolled().add(c);
                            //System.out.println("Clases: "+ s.getEnrolled().toString());
                        }
                    }
                }
            }
        }//Enroll to all the courses they chose!

        Clases.sort(null);
        Collections.reverse(Clases);
        //Ordenar de mayor a menor porque las que tienen mas alumnos tienen que tener mas prioridad

        //Assign all classes to a timeslot
        //Que tiene que verificar? Que el maestro no este dos veces en ese timeslot
        //Remueve el que se usa de las horas disponibles si hay disponibles.
        //Estan de mas temprano a mas tarde, asi que estan "seguidas"
        for (Class c : Clases) {
            int it=0;
            outer:
            while (!c.getInstructor().getHorario().isEmpty() && c.getInstructor().getHorario().size()>=it+1 ) {
                //System.out.println("Entra while");
                int classTime = c.getInstructor().getHorario().get(it);
                if (getConcurrent(classTime) < Aulas.size()) {
                    //System.out.println("Entra");
                    int numeroAula = -1;
                    for (int j = 0; j < Aulas.size(); j++) {
                        if (!Aulas.get(j).isOccupied(classTime)) {
                            numeroAula = j;
                        }
                    }
                    c.setAula(numeroAula);
                    Aulas.get(numeroAula).occupy(classTime);
                    //System.out.println(c.getAula());
                    c.setTime(classTime);
                    c.getInstructor().getHorario().remove((Integer)classTime);
                    break outer;
                }else{
                    it++;
                }
                
            }
        }
        //Validar conflictos con aulas
        //Agregue una matriz de horario para cada aula para ver si esta libre a x hora
        
        
        //Validar conflictos con estudiantes
        for(Student s : Alumnos){
            
            List<Integer> horarioAlumno = new ArrayList<>();
            List<Class> tmp = new ArrayList<>();
            tmp.addAll(s.getEnrolled());
            
            for (int j = 0; j < tmp.size(); j++) {
                
                if (horarioAlumno.contains(tmp.get(j).getTime())) {
                    s.unenroll(tmp.get(j));
                    //tmp.remove(tmp.get(j));
                }else{
                    horarioAlumno.add(tmp.get(j).getTime());
                }
            }
            
            //s.setEnrolled(tmp);
        }
        
        

    }
    
    //Cuantas aulas estan ocupadas a cierta hora
    public int getConcurrent(int time){
        int UsedRooms = 0;
        for(Class c:Clases){
            if(c.getTime()==time){
                UsedRooms++;
            }
        }
        return UsedRooms;
    }
    
    public int verifyEmpty(int roomKey){
        return 0;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InputWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InputWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InputWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InputWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InputWindow().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AgregarClaseBtn;
    private javax.swing.JButton AgregarInstructorBtn;
    private javax.swing.JList<String> DeseadasList;
    private javax.swing.JButton DesearBtn;
    private javax.swing.JList<String> DisponiblesList;
    private javax.swing.JButton GenerarAulasBtn;
    private javax.swing.JButton IngresarAlumnoBtn;
    private javax.swing.JComboBox<String> InstructorCombobox;
    private javax.swing.JButton ScheduleButton;
    private javax.swing.JCheckBox bool1000;
    private javax.swing.JCheckBox bool1130;
    private javax.swing.JCheckBox bool1300;
    private javax.swing.JCheckBox bool1420;
    private javax.swing.JCheckBox bool1540;
    private javax.swing.JCheckBox bool1700;
    private javax.swing.JCheckBox bool1830;
    private javax.swing.JCheckBox bool700;
    private javax.swing.JCheckBox bool830;
    private javax.swing.JSpinner inputAulas;
    private javax.swing.JTextField inputCode;
    private javax.swing.JTextField inputCuenta;
    private javax.swing.JTextField inputInstructorName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
